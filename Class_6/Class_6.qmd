---
title: "Class_6"
author: "Anagha Pashilkar"
subtitle: Create a function that averages the students score with the lowest grade dropped.
format: pdf

---

**This only gives average for vectors with number values**

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
grade <- function(student) {
 mean(student)

}

grade(student1)
grade(student2)
grade(student3)
```

**"is.\_\_" returns true false values based on the "\_\_" input. \*\*note: putting is.NA gives an error\*\***

```{r}
grade <- function(student) {
  is.na(student)
}

grade(student1)
grade(student2)
grade(student3)
```

```{r}
is.na(student2)
which(is.na(student2))
```

**student\[\] \<- 0: whatever you put into brackets will be indexed. adding "\<- 0" will make whatever index value equal to 0 IF it is "NA"**

```{r}
grade <- function(student) {
  is.na(student)
  student[which(is.na(student))] <- 0
  print(student)
  
}

grade(student1)
grade(student2)
grade(student3)
```

**New function that gives average for vectors with number values and NA.**

```{r}
grade <- function(student) {
  is.na(student)
  student[which(is.na(student))] <- 0
  mean(student)
  
}

grade(student1)
grade(student2)
grade(student3)
```

**Now we need to drop the lowest score. which.min() finds minimum value. student\[-which.min()\] removes the minimum value from the vector.**

```{r}
grade <- function(student) {
  is.na(student)
  student[which(is.na(student))] <- 0
  mean(student)
  print(student[-which.min(student)])
}
grade(student1)
grade(student2)
grade(student3)
```

**Final function (finds average of new vector where NA is replaced with 0 and lowest score is dropped)**

```{r}
grade <- function(student) {
  is.na(student)
  student[which(is.na(student))] <- 0
  mean(student[-which.min(student)])
}
grade(student1)
grade(student2)
grade(student3)
```

**Lab 6 Stuff**

>Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: \"https://tinyurl.com/gradeinput\"

```{r}
grade <- function(student) {
   #returns True or False if value is or is not "na"
   is.na(student)
  
   #indexes values which are "na" and replaces with 0
   student[which(is.na(student))] <- 0

   #average of all values with lowest value dropped
   mean(student[-which.min(student)])
 }
```


```{r}
url <- "https://tinyurl.com/gradeinput"
   gradebook <- read.csv(url, row.names = 1)
   #reads csv file and saves data as gradebook. 
   #argues for row one and after to be read (so student name isn't incuded as a row of data values)
   
 #apply(x, margin, function)
   #x = an array
   #margin = 1 is row and 2 is column... we want to look at avg of each row
   apply(gradebook, 1, grade)

```

>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? \[**3pts**\]

run apply function and **save results** (save as variable)

```{r}
results <- apply(gradebook, 1, grade)

#sorts from largest to smallest value. 
#sort([data set], arguement)

sort(results, decreasing = TRUE)
```

Find top scoring student

```{r}
which.max(results)
```

Find toughest homework

```{r}
hw_avg <- apply(gradebook, 2, mean, na.rm=TRUE)
which.min(hw_avg)
```
```{r}
med.scores <- apply(gradebook, 2, median, na.rm=TRUE)
which.min(med.scores)
```
```{r}
boxplot(gradebook)
```

```{r}

#average grade score
grade_avg <- mean(results)

#compare each grades under each hw to grade_avg

#grades in each hw
range <- 1:5
for (x in range) {
  hw_grades <- gradebook[,x]
  print(hw_grades)
  }



```


```{r}
cor(mask$)
```



```{r}
apply()
```

```{r}
ncol(gradebook)
nrow(gradebook)
dim(gradebook)
```
mean?

